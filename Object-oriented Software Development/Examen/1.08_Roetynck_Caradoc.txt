Naam: Roetynck
Voornaam: Caradoc
Klas: G1.08

Vergeet niet je document te hernoemen! Volg de instructies uit de opgave!

Kopieer telkens de inhoud van de volledige klasse onder de correcte titellijn.

========================================= Vraag 1 =========================================

//----------------- Bestelling -----------------
package domein;

import java.util.ArrayList;
import java.util.List;
import static utils.Gang.*;
import domein.Gerecht;
import utils.Gang;

public class Bestelling
{
	private final String naam;
	private final int aantalPersonen;
	private String[] keuzes;
	private Gerecht[] gerechten;

	public Bestelling(String naam, int aantalPersonen, String[] keuzes) 
	{
		super();
		controleerNaam(naam);
		this.naam = naam;
		controleerAantalPersonen(aantalPersonen);
		this.aantalPersonen = aantalPersonen;
		controleerKeuzeGerechten(keuzes);
		setKeuzes(keuzes);

	}

	public int getAantalPersonen() {
		return aantalPersonen;
	}

	public String getNaam() {
		return naam;
	}

	public String[] getKeuzes() {
		return keuzes;
	}

	private void controleerNaam(String naam)
	{
		if (naam == null || naam.isBlank() || naam.length() < 5)
			throw new IllegalArgumentException(String.format("naam mag niet alleen uit spaties bestaan en moet minstens 5 karaters zijn", null));
	}

	private void controleerAantalPersonen(int aantalPersonen) 
	{
		if (aantalPersonen < 2)
			throw new IllegalArgumentException();
	}

	private void controleerKeuzeGerechten(String[] keuzes) 
	{
		
		if (keuzes.length == 0)
			throw new IllegalArgumentException(String.format("Keuze gerechten moet ingevuld zijn!"));
		
		if (keuzes.length != 3 ||keuzes.length != 4)
			throw new IllegalArgumentException(String.format("Onjuist aantal gangen!"));


		if (keuzes.length == 3){
			for (String k : keuzes) {

				if (!KOUD_VOORGERECHT.bevatGerecht(k))
					throw new IllegalArgumentException(String.format("%s kan niet gekozen worden als koud voorgerecht", k));
				
				if (!WARM_VOORGERECHT.bevatGerecht(k))
					throw new IllegalArgumentException(String.format("%s kan niet gekozen worden als warm voorgerecht", k));

				if (!HOOFDGERECHT.bevatGerecht(k))
					throw new IllegalArgumentException(String.format("%s kan niet gekozen worden als hoofdgerecht", k));
				
				if (!DESSERT.bevatGerecht(k))
					throw new IllegalArgumentException(String.format("%s kan niet gekozen worden als dessert", k));
			}
		}

		if (keuzes.length == 4){
			for (String k : keuzes) {
				if (!WARM_VOORGERECHT.bevatGerecht(k))
					throw new IllegalArgumentException(String.format("%s kan niet gekozen worden als warm voorgerecht", k));
			}
		}
	}

	public void setKeuzes(String[] keuzes) {
		gerechten = new Gerecht[keuzes.length];
		
		int index = 0;
		for (String s : keuzes) {

			for (Gang gang : Gang.values()) {
				if (gang.bevatGerecht(s))
					gerechten[index] = new Gerecht(s, gang);
			}

			// if (KOUD_VOORGERECHT.bevatGerecht(s))
			// 	gerechten[index] = new Gerecht(s, KOUD_VOORGERECHT);

			
			// if (WARM_VOORGERECHT.bevatGerecht(s))
			// 	gerechten[index] = new Gerecht(s, WARM_VOORGERECHT);

				
			// if (HOOFDGERECHT.bevatGerecht(s))
			// gerechten[index] = new Gerecht(s, HOOFDGERECHT);

			
			// if (DESSERT.bevatGerecht(s))
			// 	gerechten[index] = new Gerecht(s, DESSERT);
		}
	}

	public List<String> geefGerechtnamen() 
	{
		List<String> namen = new ArrayList<>();

		for (Gerecht gerecht : gerechten) {
			namen.add(gerecht.getNaam());
		}

		return namen;
	}

	public int geefAantalPersonenVoorGerecht(String gerechtnaam) 
	{
		
		for (String  s : geefGerechtnamen()) {
			if (s.equals(gerechtnaam))
			{
				return aantalPersonen;
			}		
		}
		return 0;
	}
	
	
}
//----------------- BestellingRepository -----------------
package domein;

import java.util.ArrayList;
import java.util.List;

import persistentie.BestellingMapper;

public class BestellingRepository
{
	private final BestellingMapper bm;
	private final List<Bestelling> bestellingen;
	
	public BestellingRepository()
	{
		bm = new BestellingMapper();
		bestellingen = bm.geefBestellingen();
	}
	
	public void voegBestellingToe(Bestelling b)
	{
		bestellingen.add(b);
	}
	
	public List<Bestelling> geefBestellingenMetNaamTotEnMetLetter(char letter)
	{
		List<Bestelling> bestMetNaam = new ArrayList<>();
		for (Bestelling b : bestellingen) {
			if (b.getNaam().toUpperCase().charAt(0) >= 64 && b.getNaam().toUpperCase().charAt(0) <= letter)
				bestMetNaam.add(b);
		}

		return bestMetNaam;
	}
	
	public int geefAantalBestellingenVanGerecht(String gerechtnaam)
	{
		int aantal = 0;
		for (Bestelling b : bestellingen) {
			if (b.geefGerechtnamen().contains(gerechtnaam)) {
				aantal++;
			}
		}

		return aantal;
	}
}
//----------------- DomeinController --------------
package domein;

import static utils.Gang.DESSERT;
import static utils.Gang.HOOFDGERECHT;
import static utils.Gang.KOUD_VOORGERECHT;
import static utils.Gang.WARM_VOORGERECHT;

import java.util.ArrayList;
import java.util.List;

import dto.BestellingDTO;

public class DomeinController
{
	Bestelling huidigeBestelling;
	BestellingRepository br;
	List<BestellingDTO> bestellingDTOs;
	List<String> namenGerechten;
	int[] aantallen;
	
	public DomeinController()
	{
		br = new BestellingRepository();
	}
	
	public void voegBestellingToe(String naam, int aantalPersonen, String[] keuzes)
	{
		huidigeBestelling = new Bestelling(naam, aantalPersonen, keuzes);
	}
	
	public BestellingDTO geefInfoHuidigeBestelling()
	{
		return new BestellingDTO(huidigeBestelling.getNaam(), huidigeBestelling.getAantalPersonen(), huidigeBestelling.getKeuzes());
	}
	
	public List<BestellingDTO> geefBestellingenMetNaamTotEnMetLetter(char letter)
	{
		bestellingDTOs = new ArrayList<>();
		for (Bestelling b : br.geefBestellingenMetNaamTotEnMetLetter(letter)) {
			bestellingDTOs.add(new BestellingDTO(b.getNaam(), b.getAantalPersonen(), b.getKeuzes()));
		}

		return bestellingDTOs;
	}
	
	public List<String> geefAlleGerechtnamen()
	{
		namenGerechten = new ArrayList<>();
		for (String s : KOUD_VOORGERECHT.getGerechtnamen()) {
			namenGerechten.add(s);
		}

		for (String s : WARM_VOORGERECHT.getGerechtnamen()) {
			namenGerechten.add(s);
		}

		for (String s : HOOFDGERECHT.getGerechtnamen()) {
			namenGerechten.add(s);
		}

		for (String s : DESSERT.getGerechtnamen()) {
			namenGerechten.add(s);
		}

		return namenGerechten;
	}
	
	public int[] geefOverzichtAantallenGerechten()
	{
		aantallen = new int[geefAlleGerechtnamen().size()];

		int index = 0;
		for (String s : geefAlleGerechtnamen()) {
			
			aantallen[index++] = br.geefAantalBestellingenVanGerecht(s);	
				
		}

		return aantallen;
	}
}

//----------------- BestellingApplicatie ---------------
package cui;

import static utils.Gang.WARM_VOORGERECHT;

import java.util.Scanner;

import domein.Bestelling;
import domein.DomeinController;
import dto.BestellingDTO;
import utils.*;
public class BestellingApplicatie
{
	private final DomeinController dc;
	private final Scanner s = new Scanner(System.in);
	
	public BestellingApplicatie(DomeinController dc)
	{
		this.dc = dc;
	}

	public void organiseerBestellingen()
	{
		String[] hoofdmenu = {"Voer bestelling in", "Toon bestellingen tot en met letter", "Toon overzicht te bereiden gerechten", "Stop"};
		int keuze = kies(hoofdmenu);
		while (keuze != hoofdmenu.length)
		{
			switch (keuze)
			{
				case 1 -> voerBestellingIn();
				case 2 -> toonBestellingenTotEnMetLetter();
				default -> toonOverzicht();
			}
			keuze = kies(hoofdmenu);
		}
	}
	
	private int kies(String[] mogelijkheden)
	{
		int keuze;
		for (int i=1; i<=mogelijkheden.length; i++)
			System.out.printf("%d. %s%n", i, mogelijkheden[i-1]);
		do
		{
			System.out.printf("Geef je keuze [%d, %d]: ", 1, mogelijkheden.length);
			keuze = s.nextInt();
		}
		while (keuze < 1 || keuze > mogelijkheden.length);
		return keuze;
	}
	
	private String geefNaam()
	{
		System.out.print("Op welke (familie)naam bestel je? ");
		return s.nextLine();
	}
	
	private int geefAantalPersonen()
	{
		System.out.print("Voor hoeveel personen bestel je? ");
		return s.nextInt();
	}

	private int geefAantalGangen() 
	{
		int keuze;
		do {
			System.out.print("Uit hoeveel gangen bestaat je menu? ");
			keuze = s.nextInt();
		} while(keuze != 3 || keuze != 4);

		return keuze;
	}
	
	private void voerBestellingIn()
	{
		int aantalGangen = geefAantalGangen();
		String[] keuzes = new String[aantalGangen];

		int index = 0;
		if (aantalGangen == 4)
		{
			for (Gang g : Gang.values()) {
				System.out.printf("%n%s gerecht: ", g);
				keuzes[index++] = s.next();
			}
		}
		if (aantalGangen == 3)
		{
			for (Gang g : Gang.values()) {
				if (g.equals(WARM_VOORGERECHT))
					continue;
				System.out.println("gerecht: ");
				keuzes[index++] = s.next();
			}
		}
		Bestelling b = new Bestelling(geefNaam(), geefAantalPersonen(), keuzes);
		dc.voegBestellingToe(geefNaam(), geefAantalPersonen(), keuzes);
		toonBestelling(new BestellingDTO(b.getNaam(), b.getAantalPersonen(), b.getKeuzes()));
	}



	private void toonBestelling(BestellingDTO dto) 
	{
		System.out.printf("Bestelling op naam van %s: %n%d personen%n", dto.naam(), dto.aantalPersonen());

		for (String s : dto.keuzes()) {
			System.out.println(s);
		}

	}

	private void toonBestellingenTotEnMetLetter()
	{
		char letter = geefLetter();
		for (BestellingDTO dto : dc.geefBestellingenMetNaamTotEnMetLetter(letter)) {
			toonBestelling(dto);
		}
	}

	private char geefLetter() 
	{
		char letter;
		do {
		System.out.print("geef een (hoofd) letter");
		letter = s.next().charAt(0);
		}while (letter < 64 || letter > 64+26);

		return letter;
	}

	private void toonOverzicht()
	{

	}
}
//----------------- BestellingDTO --------
package dto;

public record BestellingDTO(String naam, int aantalPersonen, String[] keuzes) {
    
}

//----------------- StartUp ---------
package main;

import cui.BestellingApplicatie;
import domein.DomeinController;

public class StartUp
{
	public static void main(String[] args)
	{
		new BestellingApplicatie(new DomeinController()).organiseerBestellingen();
	}
}



=========================================Vraag 2=========================================

Vul de code hier rechtstreeks aan! Noteer dus enkel wat ontbreekt op het opgaveblad.
Tip: Je hebt geen tijd om al deze code over te nemen in Eclipse.

Codeblok 1:
super(naam, aankoopPrijs, verkoopPrijs);
this.promotie = true;

Codeblok 2: 
@Override

Codeblok 3: 
if (promotie) 
    
else
    return super.getVerkoopPrijs();

Codeblok 4: 
"De kost van %s (%s) bedraagt %.2f, %s promotie!", super.getNaam(), this.getClass(), promotie?"met":"zonder"

Codeblok 5:
if (index < 0 && index > productenBox.size())
    break;
for (Product p : productenBox) {
    if (p instanceof Groente) 
        break;
    p.wijzigPromotie();
}

=========================================Vraag 3=========================================

Hiervoor moet je alleen het .vpp-bestand uploaden!

=========================================Vraag 4=========================================

Plak hieronder de volledige klasse BloemTest.

package testen;

import domein.Bloem;
import static utils.Kleur.*;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.NullAndEmptySource;
import org.junit.jupiter.params.provider.ValueSource;
import org.junit.jupiter.api.Test;

class BloemTest
{
	@ParameterizedTest
	@NullAndEmptySource
	@ValueSource(strings = {"   ", "h", "5qq hite"})
	void maakBloem_grenzenEnWillekeurig_werptException(String naam)
	{
		assertThrows(IllegalArgumentException.class, () -> new Bloem(naam, WIT));
	}
	
	
	@ParameterizedTest
	@ValueSource(strings = {})
	void maakBloem_grenzenEnWillekeurig_maaktBloem(String naam) 
	{
		Bloem bloem = new Bloem(naam, GEEL);
		assertEquals(naam, bloem.getNaam());
	}

	@Test
	void maakBloem_KleurIsNull_werptException()
	{
		assertThrows(IllegalArgumentException.class, () -> new Bloem("lily of the valey", null));
	}

	@Test
	void maakBloem_KleurIsGeldigWIT_maaktBloem()
	{
		Bloem bloem = new Bloem("lily", WIT);
		assertEquals(WIT, bloem.getKleur());
	}
	
	@Test
	void maakBloem_KleurIsGeldigGEEL_maaktBloem()
	{
		Bloem bloem = new Bloem("lily", GEEL);
		assertEquals(GEEL, bloem.getKleur());
	}
	
	@Test
	void maakBloem_KleurIsGeldigROOD_maaktBloem()
	{
		Bloem bloem = new Bloem("lily", ROOD);
		assertEquals(ROOD, bloem.getKleur());
	}
	
	@Test
	void bloeitInLente_WIT_geeftTrue()
	{
		Bloem bloem = new Bloem("lily", WIT);
		assertTrue(bloem.bloeitInLente());
	}
	
	@Test
	void bloeitInLente_GEEL_geeftTrue()
	{
		Bloem bloem = new Bloem("lily", GEEL);
		assertTrue(bloem.bloeitInLente());
	}
	
	@Test
	void bloeitInLente_ROOD_geeftFalse()
	{
		Bloem bloem = new Bloem("lily", ROOD);
		assertFalse(bloem.bloeitInLente());
	}
	
	@Test
	void bloeitInLente_MEERKLEURIG_geeftFalse()
	{
		Bloem bloem = new Bloem("lily", MEERKLEURIG);
		assertFalse(bloem.bloeitInLente());
	}
}
